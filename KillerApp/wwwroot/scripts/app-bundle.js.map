{"version":3,"sources":["src/app.ts","src/environment.ts","src/main.ts","src/spell-service.ts","src/resources/index.ts","src/resources/spell.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKA,IAAa,GAAG;QAGZ,aAAoB,YAA0B;YAA1B,iBAAY,GAAZ,YAAY,CAAc;QAG9C,CAAC;QACK,sBAAQ,GAAd;;;;;;4BAEI,KAAA,IAAI,CAAA;4BAAU,WAAM,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,EAAA;;4BAApD,GAAK,MAAM,GAAG,SAAsC,CAAC;;;;;SACxD;QAEL,UAAC;IAAD,CAZA,AAYC,IAAA;IAZY,GAAG;QADf,8BAAU;yCAI2B,4BAAY;OAHrC,GAAG,CAYf;IAZY,kBAAG;;;;;;;;ICLhB,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;;;;ICAF,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAdD,8BAcC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICZD,IAAa,YAAY;QAErB,sBAAoB,IAAgB;YAAhB,SAAI,GAAJ,IAAI,CAAY;QAEpC,CAAC;QACY,mCAAY,GAAzB;;;;;gCAE6B,WAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,EAAA;;uCAA3C,SAA2C;4BACzD,WAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;mCAArB,SAAqB;4BAChC,WAAO,IAAI,EAAC;;;;SACf;QACL,mBAAC;IAAD,CAXA,AAWC,IAAA;IAXY,YAAY;QADxB,8BAAU;yCAGmB,iCAAU;OAF3B,YAAY,CAWxB;IAXY,oCAAY;;;;;;;;ICHzB,mBAA0B,MAA8B;IAExD,CAAC;IAFD,8BAEC;;;;;;;;ICJD;QAAA;QAWA,CAAC;QAAD,YAAC;IAAD,CAXA,AAWC,IAAA;IAXY,sBAAK","file":"app-bundle.js","sourcesContent":["import { autoinject } from 'aurelia-framework';\nimport { Spell } from './resources/spell';\nimport { SpellService} from './spell-service';\n\n@autoinject\nexport class App {\n    spells: Spell[];\n\n    constructor(private spellService: SpellService)\n    {\n\r\n    }\n    async Attached()\n    {\n        this.spells = await this.spellService.getAllSpells();\r\n    }\n\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { autoinject } from 'aurelia-framework';\r\nimport { HttpClient, json } from 'aurelia-fetch-client';\r\nimport { Spell } from './resources/spell';\r\n\r\n@autoinject\r\nexport class SpellService {\r\n\r\n    constructor(private http: HttpClient) {\r\n        \r\n    }\r\n    public async getAllSpells() : Promise<Spell[]>\r\n    {\r\n        let response: Response = await this.http.fetch('spell/getAllSpells')\r\n        let data = await response.json();\r\n        return data;\r\n    }\r\n}","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","export class Spell {\n    id: number;\r\n    name: string;\r\n    level: string;\r\n    type: string;\r\n    ritual: boolean;\r\n    effect: string;\r\n    castingtime: string;\r\n    range: string;\r\n    components: string;\r\n    duratation: string; \r\n}"],"sourceRoot":"../.."}